{"version":3,"sources":["logo.svg","wether/CityForm.js","counter/CountDown.js","wether/CityWether.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","CityForm","React","Component","react_default","a","createElement","onSubmit","this","props","getWether","type","name","placeholder","className","handleMe","APPKey","URL","CityWether","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","e","preventDefault","city","target","elements","value","url","concat","fetch","then","res","json","data","setState","CityName","temp","main","minTemperature","temp_min","maxTemperature","temp_max","WindSpeed","wind","speed","WetherDescription","weather","description","catch","error","console","log","state","wether_CityForm","App","wether_CityWether","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,iNCiBzBC,GCfSC,IAAMC,2LDE5B,OACCC,EAAAC,EAAAC,cAAA,QAAMC,SAAUC,KAAKC,MAAMC,WAC1BN,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OACRC,KAAK,OACLC,YAAY,gCACZT,EAAAC,EAAAC,cAAA,WAEJF,EAAAC,EAAAC,cAAA,UAAQQ,UAAU,UAAUP,SAAUC,KAAKO,UAA3C,oBATmBb,IAAMC,YECvBa,EAAS,mCACTC,EAAM,0CAsDGC,cAlDd,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAZ,KAAAU,IACZC,EAAAC,OAAAE,EAAA,EAAAF,CAAAZ,KAAAY,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAhB,QAaDE,UAAY,SAACe,GACZA,EAAEC,iBACF,IAAIC,EAAOF,EAAEG,OAAOC,SAASF,KAAKG,MAC9BC,EAAG,GAAAC,OAAMf,EAAN,eAAAe,OAAuBL,EAAvB,WAAAK,OAAqChB,EAArC,mBACPiB,MAAMF,GACLG,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GACLlB,EAAKmB,SAAS,CACbC,SAAUF,EAAKzB,KACf4B,KAAMH,EAAKI,KAAKD,KAChBE,eAAgBL,EAAKI,KAAKE,SAC1BC,eAAgBP,EAAKI,KAAKI,SAC1BC,UAAWT,EAAKU,KAAKC,MACrBC,kBAAmBZ,EAAKa,QAAQ,GAAGC,gBAGpCC,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,kBAAmBF,MA5B/ClC,EAAKqC,MAAQ,CACZjB,SAAW,GACXG,eAAgB,GAChBO,kBAAmB,GACnBL,eAAgB,GAChBE,UAAW,GACXN,KAAM,IARKrB,wEAkCZ,OACCf,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,gBACdV,EAAAC,EAAAC,cAACmD,EAAD,CAAU/C,UAAWF,KAAKE,YAC1BN,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,aACdV,EAAAC,EAAAC,cAAA,kBAAUE,KAAKgD,MAAMjB,UACrBnC,EAAAC,EAAAC,cAAA,+BAAuBE,KAAKgD,MAAMP,mBAClC7C,EAAAC,EAAAC,cAAA,kBAAUE,KAAKgD,MAAMhB,MACrBpC,EAAAC,EAAAC,cAAA,sBAAcE,KAAKgD,MAAMZ,gBACzBxC,EAAAC,EAAAC,cAAA,sBAAcE,KAAKgD,MAAMd,gBACzBtC,EAAAC,EAAAC,cAAA,wBAAgBE,KAAKgD,MAAMV,oBA7CP5C,IAAMC,WCYhBuD,gMATX,OACEtD,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAACqD,EAAD,cALUxD,cCKEyD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,KAAK,SAAAuC,GACjCA,EAAaC","file":"static/js/main.9067dfa9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\n\r\nclass CityForm extends React.Component {\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<form onSubmit={this.props.getWether}>\r\n\t\t\t\t<input type=\"text\" \r\n\t\t\t\t\t   name='city' \r\n\t\t\t\t\t   placeholder=\"please enter your city name\"/>\r\n\t\t\t\t\t   <br />\r\n\r\n\t\t\t\t<button className=\"clickMe\" onSubmit={this.handleMe}>Click Me</button>\r\n\t\t\t</form>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default CityForm","import React from 'react'\r\n\r\nclass CountDown extends React.Component{\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\tcount : 0\r\n\t\t};\r\n\r\n\t\tthis.valueUp = this.valueUp.bind(this);\r\n\t\tthis.valueDown = this.valueDown.bind(this);\r\n\t\tthis.reset = this.reset.bind(this);\r\n\t}\r\n\r\n\tvalueUp(){\r\n\t\tthis.setState((state) => ({\r\n\t\t\tcount: this.state.count + 1\r\n\t\t}));\r\n\t}\r\n\r\n\tvalueDown(){\r\n\t\tthis.setState((state) => ({\r\n\t\t\tcount: this.state.count - 1\r\n\t\t}));\r\n\t}\r\n\r\n\treset(){\r\n\t\tthis.setState({\r\n\t\t\tcount: 0\r\n\t\t})\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<p className=\"valueDisplay\">{this.state.count < 0 ? 'Please increase the value now' : this.state.count}</p>\r\n\t\t\t\t<button className=\"clickMe\" onClick={this.valueUp}>value Up</button>\r\n\t\t\t\t<button className=\"clickMe\" onClick={this.valueDown} >value Down</button>\r\n\t\t\t\t<button className=\"clickMe\" onClick={this.reset} >Reset my Counter</button>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default CountDown","import React from 'react'\r\nimport CityForm from './CityForm'\r\n\r\nconst APPKey = 'e5bb6a6ec2a2ebedd2be9141ca009d3b'\r\nconst URL = 'https://api.openweathermap.org/data/2.5'\r\n\r\nclass CityWether extends React.Component {\r\n\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\tCityName : '',\r\n\t\t\tminTemperature: '',\r\n\t\t\tWetherDescription: '',\r\n\t\t\tmaxTemperature: '',\r\n\t\t\tWindSpeed: '',\r\n\t\t\ttemp: ''\r\n\r\n\r\n\t\t}\r\n\t}\r\n\r\n\tgetWether = (e) => {\r\n\t\te.preventDefault();\r\n\t\tvar city = e.target.elements.city.value;\r\n\t\tvar url = `${URL}/weather?q=${city}&APPID=${APPKey}&units=imperial`;\r\n\t\tfetch(url)\r\n\t\t.then(res => res.json())\r\n\t\t.then(data => {\r\n\t\t\tthis.setState({\r\n\t\t\t CityName: data.name,\r\n\t\t\t temp: data.main.temp,\r\n\t\t\t minTemperature: data.main.temp_min,\r\n\t\t\t maxTemperature: data.main.temp_max,\r\n\t\t\t WindSpeed: data.wind.speed,\r\n\t\t\t WetherDescription: data.weather[0].description\r\n\t\t\t});\r\n\t\t})\r\n\t\t.catch(error => console.log(\"Error is here: \", error))\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div className=\"valueDisplay\">\r\n\t\t\t\t<CityForm getWether={this.getWether}/>\r\n\t\t\t\t<div className=\"AllValues\">\r\n\t\t\t\t\t<p>City: {this.state.CityName}</p>\r\n\t\t\t\t\t<p>Wether Description:{this.state.WetherDescription}</p>\r\n\t\t\t\t\t<p>temp: {this.state.temp}</p>\r\n\t\t\t\t\t<p>temp_max: {this.state.maxTemperature}</p>\r\n\t\t\t\t\t<p>temp_min: {this.state.minTemperature}</p>\r\n\t\t\t\t\t<p>Wind Speed: {this.state.WindSpeed}</p>\r\n\t\t\t\t</div>\t\r\n\t\t\t</div>\r\n\t\t)\r\n\t} \r\n}\r\n\r\nexport default CityWether","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport CountDown from './counter/CountDown';\nimport CityWether from  './wether/CityWether'\nimport './App.css';\nimport './counter/CountDown.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n      \t {/* <CountDown /> */} \n      \t <CityWether />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}